Lista de comandos que se pueden utilizar en SQL:

- SELECT * FROM nombre-de-tabla; Muestra todas las columnas de la tabla
- SELECT columna1, columna2, ... FROM nombre-de-tabla; Muestra de la tabla, las columnas deseadas
- SELECT DISTINCT columna FROM nombre-de-tabla;

- SELECT columna1,... FROM nombre-de-tabla WHERE condición; Selecciona de una tabla, las colunmas que quieras,
de acuerdo a una condición (ej WHERE Usuario = 'nombre')
- SELECT columna1, columna2, ... FROM nombre-de-tabla
	* WHERE condición1 AND condición2 ...;
	* WHERE condición1 OR condición2 ...;
	* WHERE NOT condición;
	* ORDER BY culumna1, columna2 ... ASC/DESC;
	* WHERE columna IS NULL; WHERE columna IS NOT NULL;

- INSERT INTO nombre-de-tabla (columna1, columna2 ...) VALUES (valor1, valor2 ...); si le das valor a toda la tabla,
no hace falta especificar las columnas
- UPDATE nombre-de-tabla SET columna1 = valor1, columna2 = valor2, ... WHERE condición; cambiar valores de una columna
- DELETE FROM nombre-de-tabla WHERE condición;
- DELETE FROM table_name; Borra todo el contenido de la tabla, pero no la tabla

Para tablas:
- CREATE TABLE table_name (
    columna1 datatype,
    columna2 datatype,
    columna3 datatype,
   .... ); datatype puede ser int, char(size), varchar(size)

- DROP TABLE table_name; borra la tabla
- TRUNCATE TABLE table_name; igual que el de delete from tabla, borra el contenido pero no la tabla
- ALTER TABLE table_name
	* ADD column_name datatype;
	* DROP COLUMN column_name;
	* ALTER COLUMN column_name datatype;

Constraint pueden ser:

    * NOT NULL - Ensures that a column cannot have a NULL value
    * UNIQUE - Ensures that all values in a column are different
    * PRIMARY KEY - A combination of a NOT NULL and UNIQUE. Uniquely identifies each row in a table
    * FOREIGN KEY - Uniquely identifies a row/record in another table
    * CHECK - Ensures that all values in a column satisfies a specific condition
    * DEFAULT - Sets a default value for a column when no value is specified
    * INDEX - Used to create and retrieve data from the database very quickly

Tambien se puede poner seguido a una constraint, AUTO_INCREMENT para que vaya aumentando algun valor

Para hacer vinculo entre tablas se usa: Pongo una que supongo que vamos a usar

SELECT watchlist.star_id, watchlist.notes, watchlist.style FROM watchlist INNER JOIN \
users on users.username=watchlist.username where users.username = "carlo";

Mas info en https://www.w3schools.com/sql/default.asp

En Python hay que hacer lo siguiente:

- import sqlite3

Iniciar y cerrar una conexión con la base de datos:
- con_bd = sqlite3.connect('contactos.db')
- con_bd.close()

Declarar y cerrar un cursor:
- cursor_agenda = con_bd.cursor()
- cursor_agenda.close()

Añadir registro a la tabla agenda:
- reg = (1, "A", "a@a.a", 1)
- cursor_agenda.execute("INSERT INTO agenda VALUES(?,?,?,?)", reg)

Completar la transacción de inserción de registro:
- con_bd.commit()

Consultar todos los registros de la tabla agenda:
- cursor_agenda.execute("SELECT * FROM agenda")
- for registro in cursor_agenda:
    print(registro)

Mas info en https://python-para-impacientes.blogspot.com/2014/02/bases-de-datos-sqlite3.html

try:

except sqlite3.IntegrityError as error:
    print("Error el usuario {} metio un {}, error:".format(user, values, error))

PRUEBAS CURL

Obtener coordenadas:
curl -i -u "carlo:teve" http://127.0.0.1:5000/api/v1/location

Cambiar lat o lon:
curl -u 'tincho:ucacha' --header "Content-Type: application/json" --request \
PUT --data '{"lat":-31, "lon":-67.2}' http://127.0.0.1:5000/api/v1/location

Agregar usuarios:
curl --header "Content-Type: application/json" --request POST --data \
'{"username":"tincho", "password":"ucacha"}' http://127.0.0.1:5000/api/v1/users

Agregar a la watchlist:
curl -u "test:dsptest00" --header "Content-Type: application/json" --request POST --data '{"star_id":37, "notes":"una estrella", "style":0}' http://127.0.0.1:5000/api/v1/watchlist

Obtener la lista de fav:
curl -i -u "carlo:teve" http://127.0.0.1:5000/api/v1/watchlist

Borrar todos los favoritos:
curl -u 'carlo:teve'  --request DELETE http://127.0.0.1:5000/api/v1/watchlist

Cambiar contraseña:
curl -u "nano:elbajo" --header "Content-Type: application/json" --request PUT \
--data '{"new_password":"enano"}' http://127.0.0.1:5000/api/v1/password

Cambiar parámetros de una estrella:
curl -u "carlo:teve" --header "Content-Type: application/json" --request PUT --data \
'{"star_id":12, "notes":"asda", "style":1}' http://127.0.0.1:5000/api/v1/watchlist/12

37, 4613, 3131, 5343, 861, 881, 2218, 5666
